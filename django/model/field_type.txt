Field types
-------------------
AutoField: Interger Field and automatically increments.

BigAutoField: 64-bit integer, same as AutoField.

BigIntegerField: 64-bit integer

BinaryField:
    A field to store raw binary data.
    only supports bytes assignment.
    Be aware that this field has limited functionality.

BooleanField: true/false

CharField:
    define: class CharField(max_length=None, **options)
    A string field, for small to large-sized strings.
    For large amounts of text, use TextField.
    The default form widget for this field is a TextInput.

CommaSeparatedIntegerField: Deprecated since version 1.9

DateField:
    Define: class DateField(auto_now=False, auto_now_add=False, **options)[
    A date, represented in Python by a datetime.date instance

    DateField.auto_now :
        Automatically set the field to now every time the object is saved.
        The field is only automatically updated when calling Model.save().

    DateField.auto_now_add:
        Automatically set the field to now when the object is first created.
        Note that the current date is always used;
        itâ€™s not just a default value that you can override.

    As currently implemented, setting auto_now or auto_now_add to True will cause the field to have editable=False and blank=True set.

    default=date.today - from datetime.date.today()

DateTimeField:
    class DateTimeField(auto_now=False, auto_now_add=False, **options)
    A date and time, represented in Python by a datetime.datetime instance.
    Takes the same extra arguments as DateField.

    The default form widget for this field is a single TextInput.
    The admin uses two separate TextInput widgets with JavaScript shortcuts.

DecimalField:
    A fixed-precision decimal number, represented in Python by a Decimal instance. Has two required arguments:

    DecimalField.max_digits:
        The maximum number of digits allowed in the number.
        Note that this number must be greater than or equal to decimal_places

    DecimalField.decimal_places:
        The number of decimal places to store with the number.

DurationField:
    A field for storing periods of time - modeled in Python by timedelta.
    When used on PostgreSQL, the data type used is an interval and
    on Oracle the data type is INTERVAL DAY(9) TO SECOND(6).
    Otherwise a bigint of microseconds is used.

EmailField:
    A CharField that checks that the value is a valid email address.
    It uses EmailValidator to validate the input.

FileField:
    See the filefield.txt
    Define: class FileField(upload_to=None, max_length=100, **options)
    A file-upload field

    FileField.upload_to:
        provides a way of setting the upload directory and file name, and can be set in two ways. In both cases, the value is passed to the Storage.save() method.

        way1: specify a string value, it may contain strftime() formatting, which will be replaced by the date/time of the file upload.
        Example:
        class MyModel(models.Model):
            # file will be uploaded to MEDIA_ROOT/uploads
            upload = models.FileField(upload_to='uploads/')
            # or...
            # file will be saved to MEDIA_ROOT/uploads/2015/01/30
            upload = models.FileField(upload_to='uploads/%Y/%m/%d/')

        way2: upload_to may also be a callable, such as a function. This will be called to obtain the upload path, including the filename. This callable must accept two arguments and return a Unix-style path (with forward slashes) to be passed along to the storage system.

        Example:
        def user_directory_path(instance, filename):
            # file will be uploaded to MEDIA_ROOT/user_<id>/<filename>
            return 'user_{0}/{1}'.format(instance.user.id, filename)

        class MyModel(models.Model):
            upload = models.FileField(upload_to=user_directory_path)

    FileField.storage:
        A storage object, which handles the storage and retrieval of your files.
        The default form widget for this field is a ClearableFileInput.

FileField and FieldFile
FilePathField
FloatField
ImageField
IntegerField
GenericIPAddressField
NullBooleanField
PositiveIntegerField
PositiveSmallIntegerField
SlugField
SmallIntegerField
TextField
TimeField
URLField
UUIDField

Every Field is a class.
