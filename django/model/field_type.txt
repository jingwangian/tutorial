Field types
-------------------
Every Field following is a class.

AutoField: Interger Field and automatically increments.

BigAutoField: 64-bit integer, same as AutoField.

BigIntegerField: 64-bit integer

BinaryField:
    A field to store raw binary data.
    only supports bytes assignment.
    Be aware that this field has limited functionality.

BooleanField: true/false

CharField:
    define: class CharField(max_length=None, **options)
    A string field, for small to large-sized strings.
    For large amounts of text, use TextField.
    The default form widget for this field is a TextInput.

CommaSeparatedIntegerField: Deprecated since version 1.9

DateField:
    Define: class DateField(auto_now=False, auto_now_add=False, **options)[
    A date, represented in Python by a datetime.date instance

    DateField.auto_now :
        Automatically set the field to now every time the object is saved.
        The field is only automatically updated when calling Model.save().

    DateField.auto_now_add:
        Automatically set the field to now when the object is first created.
        Note that the current date is always used;
        it’s not just a default value that you can override.

    As currently implemented, setting auto_now or auto_now_add to True will cause the field to have editable=False and blank=True set.

    default=date.today - from datetime.date.today()

DateTimeField:
    class DateTimeField(auto_now=False, auto_now_add=False, **options)
    A date and time, represented in Python by a datetime.datetime instance.
    Takes the same extra arguments as DateField.

    The default form widget for this field is a single TextInput.
    The admin uses two separate TextInput widgets with JavaScript shortcuts.

DecimalField:
    A fixed-precision decimal number, represented in Python by a Decimal instance. Has two required arguments:

    DecimalField.max_digits:
        The maximum number of digits allowed in the number.
        Note that this number must be greater than or equal to decimal_places

    DecimalField.decimal_places:
        The number of decimal places to store with the number.

DurationField:
    A field for storing periods of time - modeled in Python by timedelta.
    When used on PostgreSQL, the data type used is an interval and
    on Oracle the data type is INTERVAL DAY(9) TO SECOND(6).
    Otherwise a bigint of microseconds is used.

EmailField:
    A CharField that checks that the value is a valid email address.
    It uses EmailValidator to validate the input.

FileField:
    See the file_field.txt
FileField and FieldFile:
    See the file_field.txt

FilePathField:
    See the file_path_field.txt

FloatField:
    A floating-point number represented in Python by a float instance.
    The default form widget for this field is a NumberInput when localize is False or TextInput otherwise.

ImageField:
    Define: class ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options)

    Inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.

    In addition to the special attributes that are available for FileField, an ImageField also has height and width attributes.

    To facilitate querying on those attributes, ImageField has two extra optional arguments:

    ImageField.height_field:
        Name of a model field which will be auto-populated with the height of the image each time the model instance is saved.

    ImageField.width_field:
        Name of a model field which will be auto-populated with the width of the image each time the model instance is saved.

    Requires the Pillow library.

    ImageField instances are created in your database as varchar columns with a default max length of 100 characters. As with other fields, you can change the maximum length using the max_length argument.

    The default form widget for this field is a ClearableFileInput.

GenericIPAddressField:
    Define: class GenericIPAddressField(protocol='both', unpack_ipv4=False, **options)

    An IPv4 or IPv6 address, in string format (e.g. 192.0.2.30 or 2a02:42fe::4).
    The default form widget for this field is a TextInput.

    The IPv6 address normalization follows RFC 4291#section-2.2 section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like ::ffff:192.0.2.0. For example, 2001:0::0:01 would be normalized to 2001::1, and ::ffff:0a0a:0a0a to ::ffff:10.10.10.10. All characters are converted to lowercase.

    GenericIPAddressField.protocol:
        Limits valid inputs to the specified protocol. Accepted values are 'both' (default), 'IPv4' or 'IPv6'. Matching is case insensitive.

    GenericIPAddressField.unpack_ipv4:
        Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'.

    If you allow for blank values, you have to allow for null values since blank values are stored as null.

NullBooleanField:
    Like a BooleanField, but allows NULL as one of the options. Use this instead of a BooleanField with null=True. The default form widget for this field is a NullBooleanSelect.

IntegerField:
    An integer. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.
    The default form widget for this field is a NumberInput when localize is False or TextInput otherwise.

SmallIntegerField:
    Like an IntegerField, but only allows values under a certain (database-dependent) point. Values from -32768 to 32767 are safe in all databases supported by Django.

PositiveIntegerField:
    Like an IntegerField, but must be either positive or zero (0). Values from 0 to 2147483647 are safe in all databases supported by Django. The value 0 is accepted for backward compatibility reasons.

PositiveSmallIntegerField:
    Like a PositiveIntegerField, but only allows values under a certain (database-dependent) point. Values from 0 to 32767 are safe in all databases supported by Django.

SlugField:
    Define: class SlugField(max_length=50, **options)

    Slug is a newspaper term. A slug is a short label for something, containing only letters, numbers, underscores or hyphens. They’re generally used in URLs.

    Like a CharField, you can specify max_length (read the note about database portability and max_length in that section, too). If max_length is not specified, Django will use a default length of 50.

    Implies setting Field.db_index to True.

    It is often useful to automatically prepopulate a SlugField based on the value of some other value. You can do this automatically in the admin using prepopulated_fields.

    SlugField.allow_unicode:
        If True, the field accepts Unicode letters in addition to ASCII letters. Defaults to False.

TextField:
    A large text field. The default form widget for this field is a Textarea.

    If you specify a max_length attribute, it will be reflected in the Textarea widget of the auto-generated form field. However it is not enforced at the model or database level. Use a CharField for that.

TimeField:
    Define: class TimeField(auto_now=False, auto_now_add=False, **options)

    A time, represented in Python by a datetime.time instance. Accepts the same auto-population options as DateField.

    The default form widget for this field is a TextInput. The admin adds some JavaScript shortcuts.

URLField:
    Define: class URLField(max_length=200, **options)

    A CharField for a URL.

    The default form widget for this field is a TextInput.


UUIDField:
    A field for storing universally unique identifiers. Uses Python’s UUID class.
    When used on PostgreSQL, this stores in a uuid datatype, otherwise in a char(32).

    Universally unique identifiers are a good alternative to AutoField for primary_key.
    The database will not generate the UUID for you, so it is recommended to use default:

