FileField
-------------------
Define:
    class FileField(upload_to=None, max_length=100, **options)

Description: A file-upload field

FileField.upload_to:
    provides a way of setting the upload directory and file name, and can be set in two ways.
    In both cases, the value is passed to the Storage.save() method.

    Way1: specify a string value, it may contain strftime() formatting, which will be replaced by the date/time of the file upload.
    Example:
    class MyModel(models.Model):
        # file will be uploaded to MEDIA_ROOT/uploads
        upload = models.FileField(upload_to='uploads/')
        # or...
        # file will be saved to MEDIA_ROOT/uploads/2015/01/30
        upload = models.FileField(upload_to='uploads/%Y/%m/%d/')

    Way2: upload_to may also be a callable, such as a function. This will be called to obtain the upload path, including the filename. This callable must accept two arguments and return a Unix-style path (with forward slashes) to be passed along to the storage system.

    Example:
    def user_directory_path(instance, filename):
        # file will be uploaded to MEDIA_ROOT/user_<id>/<filename>
        return 'user_{0}/{1}'.format(instance.user.id, filename)

    class MyModel(models.Model):
        upload = models.FileField(upload_to=user_directory_path)

FileField.storage:
    A storage object, which handles the storage and retrieval of your files.
    The default form widget for this field is a ClearableFileInput.


Steps for using FileField or ImageField
----------------------------------------
1. Setting MEDIA_ROOT
    Define MEDIA_URL as the base public URL of that directory. Make sure that this directory is writable by the Web server’s user account.

2. Add FileField or ImageField into the model.
    defining the upload_to option to specify a subdirectory of MEDIA_ROOT to use for uploaded files.

3. Get the absolute path by url
    All that will be stored in your database is a path to the file (relative to MEDIA_ROOT).
    For example, if your ImageField is called mug_shot, you can get the absolute path to your image in a template with {{ object.mug_shot.url }}

4. Get the file name by name attribute.

5. Get the file size by size attribute.

For example:
    say your MEDIA_ROOT is set to '/home/media', and upload_to is set to 'photos/%Y/%m/%d'. The '%Y/%m/%d' part of upload_to is strftime() formatting; '%Y' is the four-digit year, '%m' is the two-digit month and '%d' is the two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in the directory /home/media/photos/2007/01/15.

Be careful
-------------------
Whenever you deal with uploaded files, you should pay close attention to where you’re uploading them and what type of files they are, to avoid security holes. Validate all uploaded files so that you’re sure the files are what you think they are. For example, if you blindly let somebody upload files, without validation, to a directory that’s within your Web server’s document root, then somebody could upload a CGI or PHP script and execute that script by visiting its URL on your site. Don’t allow that.


FieldFile
-------------------
When you access a FileField on a model, you are given an instance of FieldFile as a proxy for accessing the underlying file.
In addition to the API inherited from File such as read() and write(), FieldFile includes several methods that can be used to interact with the underlying file:
save() and delete(): default to saving the model object of the associated FieldFile in the database.

FieldFile.name:
    The name of the file including the relative path from the root of the Storage of the associated FileField.

FieldFile.size:
    The result of the underlying Storage.size() method.


FieldFile.url:
    A read-only property to access the file’s relative URL by calling the url() method of the underlying Storage class.

FieldFile.open(mode='rb')
    Opens or reopens the file associated with this instance in the specified mode.
    Unlike the standard Python open() method, it doesn’t return a file descriptor.

    Since the underlying file is opened implicitly when accessing it, it may be unnecessary to call this method except to reset the pointer to the underlying file or to change the mode.

FieldFile.close():
    Behaves like the standard Python file.close() method and closes the file associated with this instance.


FieldFile.save(name, content, save=True):
    This method takes a filename and file contents and passes them to the storage class for the field, then associates the stored file with the model field. If you want to manually associate file data with FileField instances on your model, the save() method is used to persist that file data.

    name:
        which is the name of the file, and content which is an object containing the file’s contents. The optional save argument controls whether or not the model instance is saved after the file associated with this field has been altered. Defaults to True.
    content:
        should be an instance of django.core.files.File, not Python’s built-in file object.
        You can construct a File from an existing Python file object like this:

        from django.core.files import File
        # Open an existing file using Python's built-in open()
        f = open('/path/to/hello.world')
        myfile = File(f)

        or

        from django.core.files.base import ContentFile
        myfile = ContentFile("hello world")

FieldFile.delete(save=True):
    Deletes the file associated with this instance and clears all attributes on the field.
    Note: This method will close the file if it happens to be open when delete() is called.

    Note: When a model is deleted, related files are not deleted. If you need to cleanup orphaned files, you’ll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron).
